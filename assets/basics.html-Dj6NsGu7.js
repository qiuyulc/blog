import{_ as i,c as e,a,o as n}from"./app-LxOZ_n_-.js";const s={};function t(r,l){return n(),e("div",null,l[0]||(l[0]=[a('<h2 id="开发vue项目时-做了那些性能上的优化" tabindex="-1"><a class="header-anchor" href="#开发vue项目时-做了那些性能上的优化"><span>开发Vue项目时，做了那些性能上的优化</span></a></h2><ol><li>代码层面优化</li><li>场景优化</li><li>静态资源优化</li><li>打包优化</li><li>用户体验优化</li></ol><h3 id="代码层面优化" tabindex="-1"><a class="header-anchor" href="#代码层面优化"><span>代码层面优化</span></a></h3><ol><li>组件拆分</li><li>减少不必要的响应式数据</li><li>正确使用 v-if 和 v-show</li><li>根据场景可以选择使用 v-once</li><li>使用key 优化列表渲染</li><li>事件防抖和节流</li><li>使用KeepAlive 缓存组件</li><li>合理使用生命周期钩子方法</li><li>使用异步组件</li><li>路由懒加载</li></ol><h3 id="场景优化" tabindex="-1"><a class="header-anchor" href="#场景优化"><span>场景优化</span></a></h3><ol><li>懒加载</li><li>虚拟滚动 ...</li></ol><h3 id="静态资源优化" tabindex="-1"><a class="header-anchor" href="#静态资源优化"><span>静态资源优化</span></a></h3><ol><li><p>图片优化</p><ul><li>压缩图片</li><li>使用现代图片格式：WebP、AVIF</li></ul></li><li><p>使用SVG图标</p><ul><li>精灵图</li><li>字体图标</li><li>SVG图标</li></ul></li><li><p>压缩CSS和JS文件</p></li><li><p>合并文件</p></li><li><p>使用CDN加速</p></li></ol><h3 id="打包优化" tabindex="-1"><a class="header-anchor" href="#打包优化"><span>打包优化</span></a></h3><ol><li>tree sharking</li><li>多线程打包 <ul><li>webpack插件 thread-loader</li></ul></li><li>代码分块，实现按需加载</li><li>生成sourcemap文件</li><li>优化第三方库的打包：按需打包</li><li>使用现代化构建工具</li></ol><h3 id="用户体验优化" tabindex="-1"><a class="header-anchor" href="#用户体验优化"><span>用户体验优化</span></a></h3><ol><li>加载动画</li><li>骨架屏</li><li>过渡动画</li><li>服务端渲染</li></ol><h2 id="在优化前端性能方面-通常会采取哪些措施" tabindex="-1"><a class="header-anchor" href="#在优化前端性能方面-通常会采取哪些措施"><span>在优化前端性能方面，通常会采取哪些措施</span></a></h2><ol><li>发现问题：需要具体的数据来做支撑，确定问题确实存在</li><li>确定问题：确定问题时那一个方面的问题？前端？网络？服务端问题？数据库？</li><li>解决问题：确定了问题所在，在给出具体的解决方案</li></ol><h2 id="在优化前端性能方面-你通常会采用哪些措施" tabindex="-1"><a class="header-anchor" href="#在优化前端性能方面-你通常会采用哪些措施"><span>在优化前端性能方面，你通常会采用哪些措施？</span></a></h2><ol><li>在不确定的情况下，使用浏览器的性能监控工具或通过数据埋点的情况对用户体验进行监控，找出性能瓶颈。</li><li>确定确实存在性能问题的时候，接下来确定问题来源，前端性能问题可能是由于以下几个方面造成的 <ul><li>前端问题：大文件夹杂、DOM操作频繁、动画性能差等原因</li><li>网络问题：网络延迟、带宽不足、DNS查询耗时等</li><li>服务器端问题：服务器性能瓶颈、数据库查询缓慢、缓存实效等问题</li><li>数据库问题：数据库索引不当、查询性能差、数据传输量大等 前端问题可以使用 浏览器的 Performance 面板、网络亲故分析工具，以及服务器端的日志和监控工具，找出性能瓶颈的具体位置。之后确定前端存在的性能问题后，再进行针对性的优化。这一步应该根据具体的瓶颈采取不同的优化策略</li></ul></li></ol><ul><li>网络请求过多：减少HTTP请求，合并CSS和JS文件，使用CSS精灵图或SVG图表，或者使用HTTP/2多路复用技术</li><li>静态资源太大：做资源压缩和优化，压缩js、css、图片等资源，使用WebP等高校图片格式</li><li>出事加载资源过多：按需加载JS和CSS，使用动态import分割代码，使用异步组件以及路由懒加载。</li><li>出事加载资源过多：按需加载JS和CSS，使用动态import分割代码，使用异步组件以及路由懒加载。</li><li>渲染性能瓶颈：减少重排重绘次数。 ...</li></ul>',17)]))}const o=i(s,[["render",t],["__file","basics.html.vue"]]),c=JSON.parse('{"path":"/interview/optimization/basics.html","title":"Vue项目性能优化","lang":"zh-CN","frontmatter":{"title":"Vue项目性能优化","description":"Vue项目性能优化"},"headers":[{"level":2,"title":"开发Vue项目时，做了那些性能上的优化","slug":"开发vue项目时-做了那些性能上的优化","link":"#开发vue项目时-做了那些性能上的优化","children":[{"level":3,"title":"代码层面优化","slug":"代码层面优化","link":"#代码层面优化","children":[]},{"level":3,"title":"场景优化","slug":"场景优化","link":"#场景优化","children":[]},{"level":3,"title":"静态资源优化","slug":"静态资源优化","link":"#静态资源优化","children":[]},{"level":3,"title":"打包优化","slug":"打包优化","link":"#打包优化","children":[]},{"level":3,"title":"用户体验优化","slug":"用户体验优化","link":"#用户体验优化","children":[]}]},{"level":2,"title":"在优化前端性能方面，通常会采取哪些措施","slug":"在优化前端性能方面-通常会采取哪些措施","link":"#在优化前端性能方面-通常会采取哪些措施","children":[]},{"level":2,"title":"在优化前端性能方面，你通常会采用哪些措施？","slug":"在优化前端性能方面-你通常会采用哪些措施","link":"#在优化前端性能方面-你通常会采用哪些措施","children":[]}],"git":{"updatedTime":1744617959000,"contributors":[{"name":"qiuyulc","username":"qiuyulc","email":"qiuyulc@gmail.com","commits":1,"url":"https://github.com/qiuyulc"}]},"filePathRelative":"interview/optimization/basics.md"}');export{o as comp,c as data};
