import{_ as n,c as a,a as t,o as p}from"./app-LxOZ_n_-.js";const e="/blog/assets/dom-_vDhoaMc.png",l="/blog/assets/css-BnNbvDT4.png",o={};function c(i,s){return p(),a("div",null,s[0]||(s[0]=[t(`<h3 id="解析-html" tabindex="-1"><a class="header-anchor" href="#解析-html"><span>解析 HTML</span></a></h3><p>浏览器从网络或本地文件中获取到 HTML 源代码，然后从上到下的解析源代码</p><p>若解析过程中，读取到 CSS 或 JS，停止解析（阻塞），转而解析 CSS 或执行 JS</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./css/index.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./js/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Lorem<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取HTML -&gt; 解析HTML -&gt; 读取css -&gt; 解析css -&gt; 解析HTML -&gt; 读取JS -&gt; 执行JS -&gt; 解析HTML</p><blockquote><p>为什么要将css写到页面的开头，而js写到页面的最后 css写在开头是为了让浏览器尽快读取并解析样式，避免给用户看到样式未加载的情况，也是为了避免页面闪烁 将js代码写到最后，是为了让浏览器尽快呈现页面给用户，然后在执行JS完成交互功能</p></blockquote><h3 id="生成-dom-树" tabindex="-1"><a class="header-anchor" href="#生成-dom-树"><span>生成 DOM 树</span></a></h3><p>浏览器会一边解析HTML，一边生成DOM树。</p><p><img src="`+e+`" alt="dom树"></p><p>当DOM树完全生成好后，会触发DOMContentLoaded事件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当页面中所有外部资源全部加载完毕后，会出发<code>load</code>事件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;所有资源已加载完成&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成-渲染树" tabindex="-1"><a class="header-anchor" href="#生成-渲染树"><span>生成 渲染树</span></a></h3><p>浏览器一边生成DOM树，一边计算DOM树中每个节点的样式规则，最终形成渲染树。</p><p>CSS属性的计算过程，发生在这一个步骤</p><p><img src="`+l+`" alt="渲染书"></p><h3 id="布局-layout-重排-reflow" tabindex="-1"><a class="header-anchor" href="#布局-layout-重排-reflow"><span>布局 Layout / 重排 reflow</span></a></h3><p>这个步骤又称为 <strong>reflow(回流，重排)</strong>，是指浏览器一边生成渲染树，一边计算每个元素最终的尺寸和位置。</p><p>完成后，页面中所有元素的位置和尺寸就确定下来了，即将被渲染到页面。</p><p>这个步骤会在页面之后的运行过程中不断的重复，<strong>下面的操作均会导致reflow</strong></p><ul><li>获取元素的尺寸和位置</li><li>直接或间接改变元素的尺寸和位置</li></ul><blockquote><p>reflow非常耗时，浏览器为了提升性能，对js中连续导致reflow的代码，把reflow的时间点延迟到结束后进行，但在此过程中，<strong>如果遇到了获取尺寸和位置的代码，浏览器会迫不得已立即reflow</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span></span>
<span class="line">dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span></span>
<span class="line">dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">&#39;10px&#39;</span></span>
<span class="line">dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">&#39;10px&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改变宽度 -&gt; 改变高度 -&gt; 改变横坐标 -&gt; 改变纵坐标 -&gt; reflow</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span></span>
<span class="line">dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;200px&#39;</span></span>
<span class="line">dom<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span></span>
<span class="line">dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">&#39;10px&#39;</span></span>
<span class="line">dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">&#39;10px&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改变宽度 -&gt; 改变高度 -&gt; 读取高度-&gt; reflow-&gt; 改变横坐标 -&gt; 改变纵坐标 -&gt; reflow</p><h3 id="重绘" tabindex="-1"><a class="header-anchor" href="#重绘"><span>重绘</span></a></h3><p>浏览器一边reflow，一边进行生成对应的图形绘制到页面，绘制的过程称为repaint</p><p>所有会导致<strong>reflow</strong>的代码，均会导致<strong>repaint</strong></p><p>绘制的过程是靠GPU来完成的，因此，<strong>相对于导致reflow的代码，仅会导致repaint的代码效率会高出很多</strong></p><p>凡是不会影响盒子排列，仅影响盒子外观的代码都不会导致reflow，仅会导致repaint，例如：</p><ul><li>改变背景颜色</li><li>改变字体颜色</li><li>圆角边框</li><li>背景图 。。。。</li></ul>`,33)]))}const r=n(o,[["render",c],["__file","basics.html.vue"]]),k=JSON.parse('{"path":"/interview/playup/basics.html","title":"浏览器渲染流程","lang":"zh-CN","frontmatter":{"title":"浏览器渲染流程","description":"浏览器渲染流程"},"headers":[{"level":3,"title":"解析 HTML","slug":"解析-html","link":"#解析-html","children":[]},{"level":3,"title":"生成 DOM 树","slug":"生成-dom-树","link":"#生成-dom-树","children":[]},{"level":3,"title":"生成 渲染树","slug":"生成-渲染树","link":"#生成-渲染树","children":[]},{"level":3,"title":"布局 Layout / 重排 reflow","slug":"布局-layout-重排-reflow","link":"#布局-layout-重排-reflow","children":[]},{"level":3,"title":"重绘","slug":"重绘","link":"#重绘","children":[]}],"git":{"updatedTime":1744617959000,"contributors":[{"name":"qiuyulc","username":"qiuyulc","email":"qiuyulc@gmail.com","commits":1,"url":"https://github.com/qiuyulc"}]},"filePathRelative":"interview/playup/basics.md"}');export{r as comp,k as data};
