import{_ as s,c as a,a as t,o as p}from"./app-LxOZ_n_-.js";const e="/blog/assets/event-loop-Bl14OFf0.png",l="/blog/assets/zs-sUPY4W_5.png",i="/blog/assets/yb-CfBZowFj.png",c={};function o(u,n){return p(),a("div",null,n[0]||(n[0]=[t('<h2 id="浏览器进程模型" tabindex="-1"><a class="header-anchor" href="#浏览器进程模型"><span>浏览器进程模型</span></a></h2><h3 id="何为进程" tabindex="-1"><a class="header-anchor" href="#何为进程"><span>何为进程</span></a></h3><p>程序运行需要有它自己专属的内存空间，可以把这块内存空间简单理解为进程。</p><p>每个应用至少有一个进程，进程指甲相互独立，如果要通信，需要双方同意。</p><h3 id="何为线程" tabindex="-1"><a class="header-anchor" href="#何为线程"><span>何为线程</span></a></h3><p>线程是进程的执行单元，负责执行进程中的代码。</p><p>一个进程至少有一个线程，所以在进程开启后自动创建一个线程来运行代码，该线程称为主线程。</p><p>如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程可以包含多个线程。</p><h2 id="浏览器有哪些进程和线程" tabindex="-1"><a class="header-anchor" href="#浏览器有哪些进程和线程"><span>浏览器有哪些进程和线程</span></a></h2><p>浏览器是一个多进程多线程的应用程序</p><p>其中最主要的进程有：</p><ol><li>浏览器进程 主要负责页面显示、用户交互、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</li><li>网络进程 负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。</li><li>渲染进程 渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML CSS JS 代码。 默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不互相影响。</li></ol><h2 id="渲染主线程是如何工作的" tabindex="-1"><a class="header-anchor" href="#渲染主线程是如何工作的"><span>渲染主线程是如何工作的</span></a></h2><p>渲染主线程需要处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>执行 js 代码</li><li>执行事件处理函数</li><li>....</li></ul><p>之所以只有一个主线程，是因为多线程同时操作 DOM 会导致页面渲染出问题。</p><p>比如，两个线程同时修改同一个 DOM 节点，浏览器无法确定以哪个线程为准，从而导致渲染结果不一致。</p><p>所以 渲染主线程使用排队来解决任务执行的问题，这就是事件循环。</p><h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环"><span>事件循环</span></a></h2><p><img src="'+e+'" alt="事件循环"></p><ol><li>最开始时，渲染主线程会进入一个无限循环。</li><li>每一次循环会检查消息队列中是否有任务存在，如果有，就取出第一个任务执行，执行完一个进入下一个循环；如果没有就进入休眠状态。</li><li>其他所有线程（包括其他进程的线程）可以随时想消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续拿取任务。</li></ol><p>如此反复，整个过程，被称为事件循环（消息循环）</p><h2 id="何为异步" tabindex="-1"><a class="header-anchor" href="#何为异步"><span>何为异步？</span></a></h2><p>代码在执行过程中，会遇到一下无法立即处理的任务，比如：</p><ul><li>计时完成后需要执行的任务 -- setTimeout、setInterval</li><li>网络通信完成后需要执行的任务 -- XHR、Fetch</li><li>用户操作后需要执行的任务 -- addEventListener</li></ul><p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于阻塞的状态，导致浏览器卡死。</p><p><img src="'+l+'" alt="阻塞"></p><p>所以面对这些任务，浏览器会交给其他线程处理，处理完成后，再添加到消息队列中，等待主线程执行。</p><p><img src="'+i+`" alt="异步"></p><div class="hint-container tip"><p class="hint-container-title">如何理解 JS 的异步</p><p>参考答案 JS 是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。 而渲染主线程承担着渲染页面、执行 js 等任务。如果这些任务采用同步的方式执行， 就会导致主线程长时间处于阻塞状态，从而导致浏览器卡死。 所以浏览器采用异步的方式来避免，具体做法是当某些任务发生时，如计时器、网络、事件监听等， 主线程会将任务交给其他线程处理，自身继续执行后续代码。</p><pre><code>当其他线程处理任务完成后，将回调函数添加到消息队列中，等待主线程的执行。

在这种模式下，浏览器用不阻塞，从而最大限度保证但线程的流畅运行。
</code></pre></div><h2 id="js-为何会阻碍渲染" tabindex="-1"><a class="header-anchor" href="#js-为何会阻碍渲染"><span>js 为何会阻碍渲染</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Mr.Yuan is awesome!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">var</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 死循环指定的时间</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    h1<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&quot;打印一下&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任务有优先级吗" tabindex="-1"><a class="header-anchor" href="#任务有优先级吗"><span>任务有优先级吗</span></a></h3><p>任务没有优先级，在消息队列中先进先出</p><p>但是 <strong>消息队列有优先级</strong></p><p>根据W3C标准</p><ul><li><p>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同的任务可以分属于不同的队列。 在一次时间循环中，浏览器可以根据实际情况从不同的队列中取出任物执行。</p></li><li><p>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行</p></li></ul><p><a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint" target="_blank" rel="noopener noreferrer">微任务</a></p><p>在目前 chrome 的实现中，至少包含了下面的队列</p><ul><li>延时队列：用于存放计时器到达后的回调任务，优先级[中]</li><li>交互队列：用于存放用户操作后产生的时间处理任务，优先级[高]</li><li>微队列：用于存放需要最快执行的任务，优先级[最高]</li></ul><div class="hint-container tip"><p class="hint-container-title">添加任务到微队列的主要方式主要是使用 Promise、MutationObserver等。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//</span></span>
<span class="line">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>函数<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">面试题 阐述一下JS的事件循环</p><p>事件循环又叫消息循环，是浏览器渲染主线程的工作方式。 在Chrome的源码中，它开启了一个不会结束的for循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。 根据W3C官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务，但是浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p></div><div class="hint-container tip"><p class="hint-container-title">JS中的计时器能做到精确计时吗？为什么？</p><p>参考答案：</p><p>不能，因为</p><ol><li>计算机硬件没有原子钟，无法做到精确计时。</li><li>操作系统的计时函数本身就有少量偏差，由于JS的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li><li>根据W3C标准，浏览器实现计时器时，如果嵌套层级超过5层，则会有4毫秒的最少时间，这样在计时时间少于4毫秒时又带来了偏差。</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li></ol></div>`,43)]))}const d=s(c,[["render",o],["__file","basics.html.vue"]]),k=JSON.parse('{"path":"/interview/event_loop/basics.html","title":"事件循环","lang":"zh-CN","frontmatter":{"title":"事件循环","description":"事件循环"},"headers":[{"level":2,"title":"浏览器进程模型","slug":"浏览器进程模型","link":"#浏览器进程模型","children":[{"level":3,"title":"何为进程","slug":"何为进程","link":"#何为进程","children":[]},{"level":3,"title":"何为线程","slug":"何为线程","link":"#何为线程","children":[]}]},{"level":2,"title":"浏览器有哪些进程和线程","slug":"浏览器有哪些进程和线程","link":"#浏览器有哪些进程和线程","children":[]},{"level":2,"title":"渲染主线程是如何工作的","slug":"渲染主线程是如何工作的","link":"#渲染主线程是如何工作的","children":[]},{"level":2,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[]},{"level":2,"title":"何为异步？","slug":"何为异步","link":"#何为异步","children":[]},{"level":2,"title":"js 为何会阻碍渲染","slug":"js-为何会阻碍渲染","link":"#js-为何会阻碍渲染","children":[{"level":3,"title":"任务有优先级吗","slug":"任务有优先级吗","link":"#任务有优先级吗","children":[]}]}],"git":{"updatedTime":1744617959000,"contributors":[{"name":"qiuyulc","username":"qiuyulc","email":"qiuyulc@gmail.com","commits":1,"url":"https://github.com/qiuyulc"}]},"filePathRelative":"interview/event_loop/basics.md"}');export{d as comp,k as data};
